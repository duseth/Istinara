basePath: /api
definitions:
  datatypes.Date:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  dto.ArticleDTO:
    properties:
      description_ar:
        type: string
      description_ru:
        type: string
      id:
        type: string
      link:
        type: string
      picture_path:
        type: string
      quote_ar:
        type: string
      quote_ru:
        type: string
      title_ar:
        type: string
      title_ru:
        type: string
      transcription:
        type: string
      work:
        $ref: '#/definitions/dto.WorkDTO'
    type: object
  dto.ArticleListResult:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.ArticleDTO'
        type: array
    type: object
  dto.ArticleSingleResult:
    properties:
      data:
        $ref: '#/definitions/dto.ArticleDTO'
    type: object
  dto.AuthorDTO:
    properties:
      about_ar:
        type: string
      about_ru:
        type: string
      birth_date:
        $ref: '#/definitions/datatypes.Date'
      death_date:
        $ref: '#/definitions/datatypes.Date'
      id:
        type: string
      link:
        type: string
      name_ar:
        type: string
      name_ru:
        type: string
      picture_path:
        type: string
      short_name_ar:
        type: string
      short_name_ru:
        type: string
    type: object
  dto.AuthorListResult:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.AuthorDTO'
        type: array
    type: object
  dto.AuthorSingleResult:
    properties:
      data:
        $ref: '#/definitions/dto.AuthorDTO'
    type: object
  dto.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/dto.UserDTO'
    type: object
  dto.LoginResult:
    properties:
      data:
        $ref: '#/definitions/dto.LoginResponse'
    type: object
  dto.UserDTO:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_privileged:
        type: boolean
      username:
        type: string
    type: object
  dto.WorkDTO:
    properties:
      about_ar:
        type: string
      about_ru:
        type: string
      author:
        $ref: '#/definitions/dto.AuthorDTO'
      genre_ar:
        type: string
      genre_ru:
        type: string
      id:
        type: string
      link:
        type: string
      picture_path:
        type: string
      publication_date:
        $ref: '#/definitions/datatypes.Date'
      title_ar:
        type: string
      title_ru:
        type: string
    type: object
  dto.WorkListResult:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.WorkDTO'
        type: array
    type: object
  dto.WorkSingleResult:
    properties:
      data:
        $ref: '#/definitions/dto.WorkDTO'
    type: object
  http.BadRequestResponse:
    properties:
      message:
        example: Bad request
        type: string
      status:
        example: 400
        type: integer
    type: object
  http.InternalServerErrorResponse:
    properties:
      message:
        example: Internal Server Error
        type: string
      status:
        example: 500
        type: integer
    type: object
  http.SuccessResponse:
    properties:
      data:
        example: true
        type: boolean
      status:
        example: 200
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    name: Istinara
    url: https://istinara.ru
  description: Open Dictionary of Culturally Marked Vocabulary of the Russian Language
    with Arabic Translation
  license:
    name: MIT License
    url: https://spdx.org/licenses/MIT.html
  title: Istinara API
  version: "1.0"
paths:
  /account/login:
    post:
      parameters:
      - in: formData
        name: email
        required: true
        type: string
      - in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.BadRequestResponse'
      summary: Get JWT token for authorization requests
      tags:
      - account
  /account/register:
    post:
      parameters:
      - in: formData
        name: email
        required: true
        type: string
      - in: formData
        name: password
        required: true
        type: string
      - in: formData
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.BadRequestResponse'
      summary: Registration new user in the system
      tags:
      - account
  /articles:
    get:
      description: Returns list of all articles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ArticleListResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.InternalServerErrorResponse'
      summary: Get all articles
      tags:
      - articles
  /articles/{id}:
    delete:
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.InternalServerErrorResponse'
      security:
      - token: []
      summary: Delete existence article
      tags:
      - articles
    get:
      description: Returns a single article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ArticleSingleResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.BadRequestResponse'
      summary: Get article by ID
      tags:
      - articles
    patch:
      consumes:
      - multipart/form-data
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: string
      - in: formData
        name: description_ar
        type: string
      - in: formData
        name: description_ru
        type: string
      - in: formData
        name: quote_ar
        type: string
      - in: formData
        name: quote_ru
        type: string
      - in: formData
        name: title_ar
        type: string
      - in: formData
        name: title_ru
        type: string
      - in: formData
        name: transcription
        type: string
      - in: formData
        name: work_id
        type: string
      - description: Article image that needs update
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ArticleSingleResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.InternalServerErrorResponse'
      security:
      - token: []
      summary: Update existence article
      tags:
      - articles
    post:
      consumes:
      - multipart/form-data
      parameters:
      - in: formData
        name: description_ar
        type: string
      - in: formData
        name: description_ru
        type: string
      - in: formData
        name: quote_ar
        type: string
      - in: formData
        name: quote_ru
        type: string
      - in: formData
        name: title_ar
        type: string
      - in: formData
        name: title_ru
        type: string
      - in: formData
        name: transcription
        type: string
      - in: formData
        name: work_id
        type: string
      - description: Article image
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ArticleSingleResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.InternalServerErrorResponse'
      security:
      - token: []
      summary: Add a new article
      tags:
      - articles
  /authors:
    get:
      description: Returns list of all authors
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthorListResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.InternalServerErrorResponse'
      summary: Get all authors
      tags:
      - authors
  /authors/{id}:
    delete:
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.InternalServerErrorResponse'
      security:
      - token: []
      summary: Delete existence author
      tags:
      - authors
    get:
      description: Returns a single author
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthorSingleResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.BadRequestResponse'
      summary: Get author by ID
      tags:
      - authors
    patch:
      consumes:
      - multipart/form-data
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: string
      - in: formData
        name: about_ar
        type: string
      - in: formData
        name: about_ru
        type: string
      - in: formData
        name: name_ar
        type: string
      - in: formData
        name: name_ru
        type: string
      - in: formData
        name: short_name_ar
        type: string
      - in: formData
        name: short_name_ru
        type: string
      - description: Author image that needs update
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthorSingleResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.InternalServerErrorResponse'
      security:
      - token: []
      summary: Update existence author
      tags:
      - authors
    post:
      consumes:
      - multipart/form-data
      parameters:
      - in: formData
        name: about_ar
        type: string
      - in: formData
        name: about_ru
        type: string
      - in: formData
        name: name_ar
        type: string
      - in: formData
        name: name_ru
        type: string
      - in: formData
        name: short_name_ar
        type: string
      - in: formData
        name: short_name_ru
        type: string
      - description: Author image
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthorSingleResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.InternalServerErrorResponse'
      security:
      - token: []
      summary: Add a new author
      tags:
      - authors
  /authors/{id}/works:
    get:
      description: Returns list of all works
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WorkListResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.BadRequestResponse'
      summary: Get all works by author ID
      tags:
      - authors
  /works:
    get:
      description: Returns list of all works
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WorkListResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.InternalServerErrorResponse'
      summary: Get all works
      tags:
      - works
  /works/{id}:
    delete:
      parameters:
      - description: Work ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.InternalServerErrorResponse'
      security:
      - token: []
      summary: Delete existence work
      tags:
      - works
    get:
      description: Returns a single work
      parameters:
      - description: Work ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WorkSingleResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.BadRequestResponse'
      summary: Get work by ID
      tags:
      - works
    patch:
      consumes:
      - multipart/form-data
      parameters:
      - description: Work ID
        in: path
        name: id
        required: true
        type: string
      - in: formData
        name: aboutAr
        type: string
      - in: formData
        name: aboutRu
        type: string
      - in: formData
        name: authorID
        type: string
      - in: formData
        name: genreAr
        type: string
      - in: formData
        name: genreRu
        type: string
      - in: formData
        name: titleAr
        type: string
      - in: formData
        name: titleRu
        type: string
      - description: Work image that needs update
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WorkSingleResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.InternalServerErrorResponse'
      security:
      - token: []
      summary: Update existence work
      tags:
      - works
    post:
      consumes:
      - multipart/form-data
      parameters:
      - in: formData
        name: aboutAr
        type: string
      - in: formData
        name: aboutRu
        type: string
      - in: formData
        name: authorID
        type: string
      - in: formData
        name: genreAr
        type: string
      - in: formData
        name: genreRu
        type: string
      - in: formData
        name: titleAr
        type: string
      - in: formData
        name: titleRu
        type: string
      - description: Work image
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WorkSingleResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.InternalServerErrorResponse'
      security:
      - token: []
      summary: Add a new work
      tags:
      - works
  /works/{id}/articles:
    get:
      description: Returns list of all articles
      parameters:
      - description: Work ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ArticleListResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.BadRequestResponse'
      summary: Get all articles by work ID
      tags:
      - works
schemes:
- http
- https
securityDefinitions:
  token:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
