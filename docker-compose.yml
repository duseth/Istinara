version: '3.9'

services:
  server:
    build:
      context: server
      dockerfile: Dockerfile
    container_name: server
    ports:
      - "5000:5000"
    restart: on-failure
    env_file:
      - server/.env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./:/server
    networks:
      - local

  db:
    image: postgres:latest
    container_name: postgres_db
    command:
      - "postgres"
      - "-c max_connections=20"
      - "-c shared_buffers=256MB"
      - "-c effective_cache_size=768MB"
      - "-c maintenance_work_mem=64MB"
      - "-c checkpoint_completion_target=0.9"
      - "-c wal_buffers=7864kB"
      - "-c default_statistics_target=100"
      - "-c random_page_cost=1.1"
      - "-c effective_io_concurrency=200"
      - "-c work_mem=6553kB"
      - "-c min_wal_size=1GB"
      - "-c max_wal_size=4GB"
    env_file:
      - server/.env
    ports:
      - "5432:5432"
    volumes:
      - /var/lib/postgresql/data
    networks:
      - local
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build:
      context: app
      dockerfile: Dockerfile
    container_name: app
    restart: always
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - server
    environment:
      - CHOKIDAR_USEPOLLING=true

volumes:
  pg_data:

networks:
  local:
    driver: bridge